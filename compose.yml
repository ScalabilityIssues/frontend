services:
  
  proxy:
    image: traefik:3.0
    restart: unless-stopped
    ports:
      - 60001:50051
      - 8080:8080
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # grpc entrypoint
      - --entrypoints.grpc.address=:50051
      - --entrypoints.web.address=:80
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.grpcweb.grpcweb.allowOrigins=*

  rabbitmq:
    image: rabbitmq:3
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  flightmngr:
    image: ghcr.io/scalabilityissues/flight-manager:main
    pull_policy: always
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://postgres:pwd@flightmngr-db:5432
      RABBITMQ_USERNAME: "guest"
      RABBITMQ_PASSWORD: "guest"
      RABBITMQ_HOST: "rabbitmq"
    ports:
      - 60051:50051
    labels:
      - traefik.enable=true
      - traefik.http.routers.flightmngr.rule=PathPrefix(`/flightmngr.`)
      - traefik.http.routers.flightmngr.middlewares=grpcweb
      - traefik.http.services.flightmngr.loadbalancer.server.port=50051
      - traefik.http.services.flightmngr.loadbalancer.server.scheme=h2c

  flightmngr-db:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - flightmngr-pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: pwd

  salesvc:
    image: ghcr.io/scalabilityissues/sale-service:main
    pull_policy: always
    restart: unless-stopped
    environment:
      TOKEN_SECRET: "secret"
      FAKE_PRICE: "true"
    ports:
      - 60052:50051
    labels:
      - traefik.enable=true
      - traefik.http.routers.salesvc.rule=PathPrefix(`/salesvc.`)
      - traefik.http.routers.salesvc.middlewares=grpcweb
      - traefik.http.services.salesvc.loadbalancer.server.port=50051
      - traefik.http.services.salesvc.loadbalancer.server.scheme=h2c

  ticketsvc:
    image: ghcr.io/scalabilityissues/ticket-service:master
    pull_policy: always
    restart: unless-stopped
    environment:    
        DATABASE_URL: "mongodb://mongo:mongo@ticketsvc-db:27017/"
        RABBITMQ_USERNAME: "guest"
        RABBITMQ_PASSWORD: "guest"
        RABBITMQ_HOST: "rabbitmq"
    ports:
      - 60053:50051
    labels:
      - traefik.enable=true
      - traefik.http.routers.ticketsvc.rule=PathPrefix(`/ticketsrvc.`)
      - traefik.http.routers.ticketsvc.middlewares=grpcweb
      - traefik.http.services.ticketsvc.loadbalancer.server.port=50051
      - traefik.http.services.ticketsvc.loadbalancer.server.scheme=h2c

  ticketsvc-db:
    image: mongo:7
    restart: unless-stopped
    volumes:
      - ticketsvc-mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo

  validationsvc:
    image: ghcr.io/scalabilityissues/validation-service:master
    pull_policy: always
    restart: unless-stopped
    environment:
      - GENERATE_SIGNING_KEY=true
    ports:
      - 60054:50051
    labels:
      - traefik.enable=true
      - traefik.http.routers.validationsvc.rule=PathPrefix(`/validationsvc.`)
      - traefik.http.routers.validationsvc.middlewares=grpcweb
      - traefik.http.services.validationsvc.loadbalancer.server.port=50051
      - traefik.http.services.validationsvc.loadbalancer.server.scheme=h2c
  
  updatesvc:
    image: ghcr.io/scalabilityissues/update-service:main
    pull_policy: always
    restart: unless-stopped
    environment:
      RABBITMQ_USERNAME: "guest"
      RABBITMQ_PASSWORD: "guest"
      RABBITMQ_HOST: "rabbitmq"
      SMTP_PORT: "1025"

  mailsvc:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
  
  #frontend:
  #  build: .
  #  restart: unless-stopped
  #  labels:
  #    - traefik.enable=true
  #    - traefik.http.routers.frontend.rule=PathPrefix(`/`)
  #    - traefik.http.services.frontend.loadbalancer.server.port=80


volumes:
  flightmngr-pgdata:
  ticketsvc-mongo: